{"version":3,"file":"mermaid-view.mjs","sources":["../code/tiny_loader.mjs","../code/mermaid-view.jsy"],"sourcesContent":["export default tiny_loader\nexport function tiny_loader(opt) {\n  const D = document\n  const src = 'string' === typeof opt ? opt : opt.src\n  if (src === opt) opt = {src: opt}\n  if (src != encodeURI(src))\n    throw new Error('Invalid script src')\n\n  let s = D.querySelector('script[src=\"'+ src + '\"]')\n  if (!s) {\n    s = D.createElement('script')\n\n    if (src.startsWith('http') && undefined === opt.crossorigin)\n      opt.crossorigin = 'anonymous'\n\n    D.head.appendChild(Object.assign(s, opt))\n  } else if (!s.promise)\n    return s.promise\n\n  return s.promise = new Promise((resolve, reject) => {\n    s.onload = e => resolve(e.target)\n    s.onerror = e => reject(e)\n  })\n}\n","import tiny_loader from './tiny_loader.mjs'\n\nconst _mmd0 = @!>\n  await tiny_loader @ 'https://cdn.jsdelivr.net/npm/mermaid@8.4.5/dist/mermaidAPI.js'\n  window.mermaid.initialize @: startOnLoad: false\n  return window.mermaid\n\n\nasync function _mmd_svg_render(source) ::\n  const mermaid = await _mmd0\n  let svg_xml\n  try ::\n    svg_xml = mermaid.render('root', source)\n  catch err ::\n    console.warn @ err\n    return\n\n  // fixup SVG... but WHY?\n  svg_xml = svg_xml.replace('height=\"100%\"', 'preserveAspectRatio=\"xMinYMin meet\"')\n  return svg_xml\n\n\nexport class MermaidSVGView extends HTMLElement ::\n  constructor() ::\n    super()\n    this.attachShadow({mode: 'open'})\n\n    const style = this.ownerDocument.createElement('style')\n    style.innerText = `\n      :host { display: flex; overflow: hidden; }\n      figure { margin: 0; padding: 0; flex-grow: 1; display: flex; }\n      `\n    this.shadowRoot.appendChild(style)\n\n  async connectedCallback() ::\n    const source = this.textContent\n    const svg_src = await _mmd_svg_render(source)\n    if ! svg_src :: return\n\n    this.textContent = ''\n\n    const root = this.ownerDocument.createElement('figure')\n    root.innerHTML = svg_src\n\n    this.shadowRoot.appendChild(root)\n\n\nfunction svg_data_url(svg_src) ::\n  return 'data:image/svg+xml,' + encodeURIComponent(svg_src)\n\nexport class MermaidImageView extends HTMLElement ::\n  async connectedCallback() ::\n    const source = this.textContent\n    const svg_src = await _mmd_svg_render(source)\n    if ! svg_src :: return\n\n    this.textContent = ''\n\n    const OD = this.ownerDocument\n    const img = OD.createElement('img')\n    img.src = svg_data_url(svg_src)\n\n    if 0 ::\n      this.appendChild(img)\n\n    else ::\n      const root = OD.createElement('figure')\n      root.classList.add('mermaid')\n      root.appendChild(img)\n      this.parentNode.replaceChild(root, this)\n\n\ncustomElements.define @ 'mermaid-image-view', MermaidImageView\ncustomElements.define @ 'mermaid-svg-view', MermaidSVGView\n\nexport class MermaidView extends MermaidImageView ::\ncustomElements.define @ 'mermaid-view', MermaidView\n\nexport default MermaidView\n\n"],"names":[],"mappings":";EAEE;EACA,YAAY,QAAQ;EACpB;EACA;IACE,gBAAgB,oBAAoB;;EAEtC,wBAAwB,cAAc,QAAQ,IAAI;EAClD;IACE,oBAAoB,QAAQ;;IAE5B,mBAAmB,MAAM;MACvB,kBAAkB;;IAEpB;;IAEA;;EAEF;IACE;IACA;;AAEJ;;ACrBA;EACE,kBAAmB;EACnB,2BAA4B;EAC5B;;;AAGF;EACE;EACA;EACA;IACE,yBAAyB,MAAM;SAC5B;IACH,aAAc;IACd;;;EAGF,0BAA0B,eAAe,EAAE,qCAAqC;EAChF;;;AAGF;EACE;IACE;IACA,yBAAyB,MAAM;;IAE/B,+CAA+C,OAAO;IACtD,kBAAkB;AAChB;AACA;AACA;IACF;;EAEF;IACE;IACA;QACG,YAAY;;IAEf,mBAAmB;;IAEnB,8CAA8C,QAAQ;IACtD;;IAEA;;;AAGJ;EACE,OAAO,qBAAqB;;AAE9B;EACE;IACE;IACA;QACG,YAAY;;IAEf,mBAAmB;;IAEnB;IACA,6BAA6B,KAAK;IAClC;;;MAME,8BAA8B,QAAQ;MACtC,mBAAmB,SAAS;MAC5B;MACA;;;AAGN,sBAAuB,oBAAqB;AAC5C,sBAAuB,kBAAmB;;AAE1C;AACA,sBAAuB,cAAe;;;;;"}