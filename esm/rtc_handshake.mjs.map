{"version":3,"file":"rtc_handshake.mjs","sources":["../code/rtc_handshake.jsy"],"sourcesContent":["\nexport default RTCHandshake\nexport class RTCHandshake ::\n  static with_peer(pc, send_msg) ::\n    return new this(pc, send_msg)\n\n  static create(send_msg) ::\n    return this.with_cfg(this.cfg_std(), send_msg)\n\n  static with_cfg(cfg, send_msg) ::\n    const pc = new RTCPeerConnection(cfg)\n    return this.with_peer(pc, send_msg)\n\n  static cfg_std() :: return @{}\n    sdpSemantics: 'unified-plan'\n    iceServers: @[]\n      @{} urls: 'stun:stun1.l.google.com:19302'\n\n\n  constructor(pc, send_msg) ::\n    if 'function' !== typeof send_msg :: throw new TypeError\n\n    this.pc = pc\n    this.send_msg = send_msg\n    pc.addEventListener @ 'icecandidate', this._evt_ice.bind(this, send_msg)\n\n    this.has_connected = new Promise @ on_connected => @\n      this.has_ended = new Promise @ on_ended => @\n        this.pc.addEventListener @ 'connectionstatechange',\n          this._evt_state.bind(this, on_connected, on_ended)\n\n  _evt_ice(send_msg, {candidate}) ::\n    if candidate ::\n      send_msg(candidate)\n\n  _evt_state(on_connected, on_ended) ::\n    switch this.pc.connectionState ::\n      case 'connected':\n        return on_connected(this)\n\n      case 'disconnected': case 'failed': case 'closed':\n        return on_ended(this)\n\n\n  async rtc_initiate() ::\n    const {pc} = this\n    const offer = await pc.createOffer()\n    await pc.setLocalDescription(offer)\n    await this.send_msg(offer)\n    return pc\n\n  async _rtc_offer(offer) ::\n    const {pc} = this\n    if null != pc.remoteDescription ::\n      return\n\n    await pc.setRemoteDescription(offer)\n\n    if null == pc.localDescription ::\n      const answer = await pc.createAnswer()\n      await pc.setLocalDescription(answer)\n      await this.send_msg(answer)\n\n  async _rtc_ice(msg) ::\n    const ice = new RTCIceCandidate(msg)\n    await this.pc.addIceCandidate(ice)\n\n  async on_rtc_msg(msg) ::\n    try ::\n      if msg.candidate ::\n        return await this._rtc_ice(msg)\n      else if msg.sdp ::\n        return await this._rtc_offer(msg)\n    catch err ::\n      this._on_msg_error(msg, err)\n\n  _on_msg_error(msg, err) ::\n    console.warn @ \"RTC error:\", err\n\n"],"names":[],"mappings":";EAGE;IACE;;EAEF;IACE;;EAEF;IACE;IACA;;EAEF,kBAAmB;IACjB,cAAc;IACd;OACK,MAAO;;;EAGd;QACK,UAAU,uBAAuB;;IAEpC;IACA;IACA,oBAAqB,cAAe;;IAEpC,iCAAkC;MAChC,6BAA8B;QAC5B,yBAA0B,uBAAwB;UAChD;;EAER;QACI;MACA;;EAEJ;YACQ;MACJ,KAAK,WAAW;QACd;;MAEF,KAAK,cAAc,OAAO,QAAQ,OAAO,QAAQ;QAC/C;;;EAGN;IACE;IACA;IACA;IACA;IACA;;EAEF;IACE;QACE;MACA;;IAEF;;QAEE;MACA;MACA;MACA;;EAEJ;IACE;IACA;;EAEF;IACE;UACI;QACA;eACK;QACL;WACC;MACH;;EAEJ;IACE,aAAc,YAAa;;;;;"}