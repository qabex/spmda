{"version":3,"file":"markdownit-view.mjs","sources":["../code/tiny_loader.mjs","../code/markdownit-view.jsy"],"sourcesContent":["export default tiny_loader\nexport function tiny_loader(opt) {\n  const D = document\n  const src = 'string' === typeof opt ? opt : opt.src\n  if (src === opt) opt = {src: opt}\n  if (src != encodeURI(src))\n    throw new Error('Invalid script src')\n\n  let s = D.querySelector('script[src=\"'+ src + '\"]')\n  if (!s) {\n    s = D.createElement('script')\n\n    if (src.startsWith('http') && undefined === opt.crossorigin)\n      opt.crossorigin = 'anonymous'\n\n    D.head.appendChild(Object.assign(s, opt))\n  } else if (!s.promise)\n    return s.promise\n\n  return s.promise = new Promise((resolve, reject) => {\n    s.onload = e => resolve(e.target)\n    s.onerror = e => reject(e)\n  })\n}\n","import tiny_loader from './tiny_loader.mjs'\nimport JSON5 from 'https://cdn.jsdelivr.net/npm/json5@2.1.1/dist/index.min.mjs'\n\nexport class MarkdownitView extends HTMLElement ::\n  async connectedCallback() ::\n    const root = this.ownerDocument.createElement('div')\n\n    const source = this.textContent\n    this.textContent = ''\n\n    let rendered = this._md_cache.get(source)\n    if undefined === rendered ::\n      const md = await this.md\n      this._md_cache.set @ source,\n        rendered = md.render(source)\n\n    root.innerHTML = rendered\n    this.appendChild(root)\n\n  static initialize() ::\n    this.prototype._md_cache = new Map()\n    this.md = this.prototype.md =\n      _initialize_markdownit(this)\n    return this\n\n  static fence_webcomponent() ::\n    return @\\ md ::\n      const rules = md.renderer.rules\n      const prev_fence = rules.fence\n      rules.fence = function (tokens, idx, options, env, slf) ::\n        const tkn = tokens[idx]\n        const m = /\\s*[!](\\w+)\\s*(.*)$/.exec(tkn.info)\n        if ! m ::\n          return prev_fence.apply(rules, arguments)\n\n        let [_, wc_name, wc_options] = m\n        const elem = document.createElement(`${wc_name}-view`)\n        elem.textContent = tkn.content\n        if wc_options ::\n          try ::\n            wc_options = JSON.stringify @\n              JSON5.parse @ `{${wc_options}}`\n          catch (err) ::\n          elem.setAttribute @ 'options', wc_options\n\n        return elem.outerHTML\n\n\ncustomElements.define @ 'markdownit-view', MarkdownitView.initialize()\n\nexport default MarkdownitView\n\n\nasync function _initialize_markdownit(klass) ::\n  ::\n    const sc0 = tiny_loader @ 'https://cdn.jsdelivr.net/npm/markdown-it@10.0.0/dist/markdown-it.min.js'\n    const sc1 = tiny_loader @ 'https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js'\n    await sc0\n    await sc1\n\n  const md = window.markdownit @:\n    highlight(str, lang, ...args) ::\n      if lang && hljs.getLanguage(lang) ::\n        try ::\n          return hljs.highlight(lang, str).value\n        catch (err) ::\n          console.warn @ '[hljs exception]:', {lang}, err\n\n      return '' // use external default escaping\n\n  md.use @ klass.fence_webcomponent(md)\n  return md\n\n"],"names":[],"mappings":";;;EAEE;EACA,YAAY,QAAQ;EACpB;EACA;IACE,gBAAgB,oBAAoB;;EAEtC,wBAAwB,cAAc,QAAQ,IAAI;EAClD;IACE,oBAAoB,QAAQ;;IAE5B,mBAAmB,MAAM;MACvB,kBAAkB;;IAEpB;;IAEA;;EAEF;IACE;IACA;;AAEJ;;;ECnBE;IACE,8CAA8C,KAAK;;IAEnD;IACA,mBAAmB;;IAEnB;QACE;MACA;MACA,mBAAoB;QAClB;;IAEJ;IACA;;EAEF;IACE;IACA;MACE;IACF;;EAEF;IACE;MACE;MACA;MACA;QACE;QACA,UAAU,qBAAqB;YAC5B;UACD;;QAEF;QACA,oCAAoC,GAAG,QAAQ,MAAM;QACrD;YACE;UACA;YACE;cACE,YAAc,IAAI,WAAW;UACjC;UACA,kBAAmB,SAAU;;QAE/B;;;AAGR,sBAAuB,iBAAkB;;;AAKzC;;IAEI,wBAAyB;IACzB,wBAAyB;IACzB;IACA;;EAEF;IACE;UACI;QACA;UACE;QACF;UACE,aAAc,mBAAoB;;MAEtC,OAAO,EAAE;;EAEb,OAAQ;EACR;;;;;"}