{"version":3,"file":"view_utils.mjs","sources":["../code/view_utils.jsy"],"sourcesContent":["\nexport const as_src_view = @!\n  const _cache = new Map()\n\n  const _as_view_class = baseElement => @\n    class SrcBaseElement extends baseElement ::\n      connectedCallback() ::\n        const src = this.textContent\n        this.textContent = ''\n        this._render_src(src, this.ownerDocument)\n\n      _render_src(src) ::\n        this.src = src\n\n      static initialize() ::\n        return this\n      static define_as(key) ::\n        const klass = this.initialize()\n        customElements.define @ key, klass\n        return klass\n\n  return @\\ baseElement ::\n    let res = _cache.get(baseElement)\n    if undefined === res ::\n      res = _as_view_class(baseElement)\n      _cache.set(baseElement, res)\n    return res\n\n\nexport function raf_batch(on_render) ::\n  let q=[], tid=null\n  return @\\ ...args ::\n    q.push(...args)\n    if null === tid ::\n      tid = requestAnimationFrame @ _batch\n\n  function _batch() ::\n    const batch = q\n    q=[]; tid=null\n    on_render(batch)\n\n\nexport function fetch_cors_get(src, headers) ::\n  return fetch @ src, @{} method: 'GET', mode: 'cors', headers\nexport async function fetch_json(src, headers) ::\n  const req = await fetch_cors_get(src, headers)\n  return req.json()\nexport async function fetch_text(src, headers) ::\n  const req = await fetch_cors_get(src, headers)\n  return req.text()\n\nexport const data_url = @\\ mime, src =>\n  `data:${mime},${encodeURIComponent(src)}`\nexport const svg_data_url = src =>\n  data_url @ 'image/svg+xml', src\n\n"],"names":[],"mappings":";EAEE;;EAEA;IACE;MACE;QACE;QACA,mBAAmB;QACnB;;MAEF;QACE;;MAEF;QACE;MACF;QACE;QACA,sBAAuB;QACvB;;EAEN;IACE;QACE;MACA;MACA;IACF;;;;EAIF;EACA;IACE;QACE;MACA,4BAA6B;;EAEjC;IACE;IACA;IACA;;;;EAIF,aAAc,KAAS,QAAS,KAAK,QAAQ,MAAM;;EAEnD;EACA;;EAEA;EACA;;;EAGA,QAAQ,KAAK,GAAG,wBAAwB;;EAExC,SAAU,eAAgB;;;;"}