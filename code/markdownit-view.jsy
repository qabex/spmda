import tiny_loader from './tiny_loader.mjs'
import {as_src_view} from './view_utils.jsy'
import {JSON5} from './deps.jsy'

export class MarkdownitView extends as_src_view(HTMLElement) ::
  async _render_src(markdown_src, doc) ::
    let rendered = this._cache.get(markdown_src)
    if undefined === rendered ::
      const md = await this.md
      rendered = md.render(markdown_src)
      this._cache.set @ markdown_src, rendered

    const root = doc.createElement('div')
    root.innerHTML = rendered
    this.appendChild(root)


  static fence_webcomponent() ::
    return @\ md ::
      const rules = md.renderer.rules
      const prev_fence = rules.fence
      rules.fence = function (tokens, idx, options, env, slf) ::
        const tkn = tokens[idx]
        const m = /\s*[!]([\w\-]+)\s*(.*)$/.exec(tkn.info)
        if ! m ::
          return prev_fence.apply(rules, arguments)

        let [_, wc_name, wc_options] = m
        const elem = document.createElement(`${wc_name}-view`)
        elem.textContent = tkn.content
        if wc_options ::
          try ::
            wc_options = JSON.stringify @
              JSON5.parse @ `{${wc_options}}`
          catch (err) ::
          elem.setAttribute @ 'options', wc_options

        return elem.outerHTML


  static initialize() ::
    this.prototype._cache = new Map()
    this.md = this.prototype.md =
      this._init_markdownit()
    return this

  static async _init_markdownit() ::
    ::
      const deps = @[]
        tiny_loader @ 'https://cdn.jsdelivr.net/npm/markdown-it@10.0.0/dist/markdown-it.min.js'
        tiny_loader @ 'https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.17.1/build/highlight.min.js'

      while deps.length :: await deps.pop()

    const md = window.markdownit @:
      highlight(str, lang, ...args) ::
        if lang && hljs.getLanguage(lang) ::
          try ::
            return hljs.highlight(lang, str).value
          catch (err) ::
            console.warn @ '[hljs exception]:', {lang}, err

        return '' // use external default escaping

    md.use @ this.fence_webcomponent(md)
    return md


MarkdownitView.define_as @ 'markdownit-view'
export default MarkdownitView

